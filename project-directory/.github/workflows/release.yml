name: Auto Release

on:
  push:
    branches: [ main ]
    
jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    # For JavaScript/Node.js projects
    - name: Get version from package.json
      id: package-version
      uses: martinbeentjes/npm-get-version-action@v1.3.1
      if: ${{ hashFiles('package.json') != '' }}
    
    # For Python projects
    - name: Get version from pyproject.toml
      id: python-version
      if: ${{ hashFiles('pyproject.toml') != '' }}
      run: |
        VERSION=$(grep -m 1 'version\s*=' pyproject.toml | sed 's/.*version\s*=\s*"\(.*\)".*/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    # Auto tag when version changes
    - name: Create Tag
      id: create_tag
      run: |
        if [ -f "package.json" ]; then
          VERSION=${{ steps.package-version.outputs.current-version }}
        elif [ -f "pyproject.toml" ]; then
          VERSION=${{ steps.python-version.outputs.version }}
        else
          echo "No version file found"
          exit 1
        fi
        
        echo "Using version: $VERSION"
        
        # Check if the tag already exists
        if [ $(git tag -l "v$VERSION") ]; then
          echo "Tag v$VERSION already exists"
        else
          echo "Creating new tag v$VERSION"
          git tag "v$VERSION"
          git push origin "v$VERSION"
          echo "created_tag=true" >> $GITHUB_OUTPUT
        fi
    
    # Create GitHub Release when a new tag is created
    - name: Create GitHub Release
      if: steps.create_tag.outputs.created_tag == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.package-version.outputs.current-version || steps.python-version.outputs.version }}
        name: Release v${{ steps.package-version.outputs.current-version || steps.python-version.outputs.version }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}